🛡️ SQL Injection 방어 기법: Prepared Statement와 입력값 검증

SQL Injection은 사용자가 입력한 값을 검증하지 않고, 직접 SQL 쿼리에 삽입할 때 발생하는 취약점입니다. 이를 통해 공격자는 데이터베이스의 구조를 파악하거나, 인증을 우회하는 등의 악의적인 행위를 할 수 있습니다.
이 글에서는 SQL Injection을 방어하기 위한 두 가지 강력한 기법, Prepared Statement와 입력값 검증에 대해 다룹니다.


1. 🛡️ Prepared Statement (준비된 문장)

Prepared Statement는 SQL 쿼리와 사용자 입력값을 분리함으로써, 입력값이 코드로 실행되지 않고 단순한 데이터로 처리되도록 보장하는 방법입니다. 이를 통해 SQL Injection을 효과적으로 차단할 수 있습니다.


파이썬 예시 (MySQL)
import mysql.connector

# 데이터베이스 연결
conn = mysql.connector.connect(host='localhost', user='root', password='password', database='test_db')
cursor = conn.cursor()

# 사용자 입력 (공격자가 ID에 "admin' --"를 입력했다고 가정)
user_id = "admin' --"
user_pw = "password"

# Prepared Statement 사용
query = "SELECT * FROM users WHERE username = %s AND password = %s"
cursor.execute(query, (user_id, user_pw))

# 결과 확인
result = cursor.fetchone()
print("결과:", result)

# 연결 종료
cursor.close()
conn.close()

작동 원리

쿼리를 미리 준비하고, %s 같은 플레이스홀더로 값을 채웁니다.

cursor.execute()에서 입력값을 전달하면, 데이터베이스가 자동으로 입력값을 안전하게 처리합니다.

결과적으로, 공격자가 admin' --를 입력하더라도, 쿼리는 다음처럼 변환됩니다.


SELECT * FROM users WHERE username = 'admin\' --' AND password = 'password'
따라서 주석 처리(--)가 문자열로 취급되어, SQL Injection이 무력화됩니다.



2.🛡️입력값 검증 (Input Validation)

입력값 검증은 사용자가 입력한 값 자체를 검사해, 의심스러운 입력을 아예 차단해 버리는 방법입니다. 이 기법을 통해 SQL Injection 시도를 사전에 방지할 수 있습니다.

파이썬 예시 (정규표현식 활용)
import re

def is_valid_username(username):
    # 영문자, 숫자, 밑줄(_)만 허용
    return re.match(r'^[a-zA-Z0-9_]+$', username)

# 사용자 입력 (공격자가 "admin' --" 입력 시도)
user_id = "admin' --"

# 입력값 검증
if not is_valid_username(user_id):
    print("유효하지 않은 ID입니다.")
else:
    print("ID 확인 완료!")

작동 원리

정규표현식을 이용해 허용할 문자만 통과시키는 방식을 사용합니다.

예시에서는 **영문자, 숫자, 밑줄(_)**만 허용하고, 주석 처리(--)나 싱글 쿼테이션(') 같은 위험한 문자는 차단했습니다. 🚧

Prepared Statement
장점 - 쿼리와 데이터를 분리해, SQL Injection을 완벽 차단
단점 - 데이터베이스 연결 시 구현이 필요함

Input Validation

장점 - 의심스러운 입력 자체를 차단해, 데이터베이스 접근조차 허용하지 않음
단점 - 모든 입력값에 대해 규칙을 세심하게 정의해야 함



🛡️최선의 방법은 두 가지를 함께 사용하는 것입니다.
Prepared Statement로 안전한 쿼리를 구성하고,
입력값 검증으로 위험한 입력 자체를 막으면, 강력한 보안 시스템을 구축할 수 있습니다.


4. 결론

SQL Injection은 치명적인 취약점이지만, Prepared Statement와 
Input Validation을 적절히 활용하면 강력한 방어벽을 구축할 수 있습니다.

주석 처리(--)나 특수 문자 삽입 같은 공격 기법에 대비해, 
늘 철저한 보안 관점을 유지하는 것이 중요합니다.

#SQLInjection #PreparedStatement #InputValidation #CyberSecurity #Python #GameSecurity

